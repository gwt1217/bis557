test_that("We can multiply and transpose", {
expect_equal(sm1 %*% sm3,
sparse.matrix(i = rep(1:2, 3), j = rep(1:3, each = 2),
x = c(3, 1, 6, 2, 9, 3), dims = c(3, 3)))
expect_error(sm1 %*% sm1)
expect_equal(t(sm1) %*% sm1,
sparse.matrix(i = 1, j = 1, x = 10, dims = c(2, 2)))
})
library(testthat)
context('Test the sparse matrix functions')
# If no dimensions are given, assume the largest coordinates are the
# dimensions.
sm0 <- sparse.matrix(i = c(1, 2), j = c(1, 1), x = c(1, 1))
sm1 <- sparse.matrix(i = c(1, 2), j = c(1, 1), x = c(3, 1), dims = c(3, 2))
sm2 <- sparse.matrix(i = c(1, 2, 2), j = c(1, 1, 2), x = c(4.4, 1.2, 3),
dims = c(2, 3))
sm3 <- sparse.matrix(i = rep(1, 3), j = 1:3, x = 1:3, dims = c(2, 3))
test_that("We have sparse.matrix objects.", {
expect_is(sm0, "sparse.matrix")
expect_is(sm1, "sparse.matrix")
expect_is(sm2, "sparse.matrix")
})
test_that("We can add sparse matrices.", {
expect_equal(sm0 + sm0,
sparse.matrix(i = c(1, 2), j = c(1, 1), x = c(2, 2),
dims = c(2, 1)))
expect_equal(sm2 + sm3,
sparse.matrix(i = c(rep(1:2, 2), 1), j = c(1, 1, 2, 2, 3),
x = c(5.4, 1.2, 2, 3, 3)))
expect_error(sm2 + sm0)
})
test_that("We can multiply and transpose", {
expect_equal(sm1 %*% sm3,
sparse.matrix(i = rep(1:2, 3), j = rep(1:3, each = 2),
x = c(3, 1, 6, 2, 9, 3), dims = c(3, 3)))
expect_error(sm1 %*% sm1)
expect_equal(t(sm1) %*% sm1,
sparse.matrix(i = 1, j = 1, x = 10, dims = c(2, 2)))
})
sparse.matrix <- function(i, j, x, dims = c(max(i), max(j))){
structure(list(data.frame(i = c(1, 2), j = c(1, 1), x = c(3, 1)), dims), class = "sparse.matrix")
}
# add
`+.sparse.matrix` <- function(a, b){
if (!identical(a[[2]], b[[2]]))
stop("dimensions not match")
c <- merge(a[[1]], b[[1]], by = c("i", "j"), all = TRUE, suffixes = c("1", "2"))
c$x1[is.na(c$x1)] <- 0
c$x2[is.na(c$x2)] <- 0
c$x <- c$x1 + c$x2
c[, c("i", "j", "x")]
sparse.matrix(c$i, c$j, c$x, dims = a[[2]])
}
# multiply
# %*% is not S3 object
`%*%.default` = .Primitive("%*%")  # keep defalut
`%*%` = function(x,...){
UseMethod("%*%",x)
}
`%*%` <- function(x, y) {
UseMethod("%*%", x)
}
`%*%.sparse.matrix` <- function(a, b){
if ((a[[2]][2] != b[[2]][1]))
stop("dimensions not match")
colnames(b[[1]]) <- c("i2", "j2", "x2")
c <- merge(a[[1]], b[[1]], by.x = "j", by.y = "i2",
all = FALSE, suffixes = c("1", "2"))
c$x <- c$x * c$x2
c$key <- paste(c$i, c$j, sep = "-")
x <- tapply(c$x, c$key, sum)
key <- strsplit(names(x), "-")
d <- data.frame(i = sapply(key, getElement, 1),
j = sapply(key, getElement, 2),
x = as.numeric(x))
sparse.matrix(c$i, c$j, c$x, dims = c(a[[2]][1], b[[2]][2]))
}
# transpose
t <- function (x, ...) {
UseMethod("t", x)
}
`t.sparse.matrix` <- function(a){
temp <- a[[1]]$i
a[[1]]$i <- a[[1]]$j
a[[1]]$j <- temp
a[[2]] <- rev(a[[2]])
return(a)
}
library(testthat)
context('Test the sparse matrix functions')
# If no dimensions are given, assume the largest coordinates are the
# dimensions.
sm0 <- sparse.matrix(i = c(1, 2), j = c(1, 1), x = c(1, 1))
sm1 <- sparse.matrix(i = c(1, 2), j = c(1, 1), x = c(3, 1), dims = c(3, 2))
sm2 <- sparse.matrix(i = c(1, 2, 2), j = c(1, 1, 2), x = c(4.4, 1.2, 3),
dims = c(2, 3))
sm3 <- sparse.matrix(i = rep(1, 3), j = 1:3, x = 1:3, dims = c(2, 3))
test_that("We have sparse.matrix objects.", {
expect_is(sm0, "sparse.matrix")
expect_is(sm1, "sparse.matrix")
expect_is(sm2, "sparse.matrix")
})
test_that("We can add sparse matrices.", {
expect_equal(sm0 + sm0,
sparse.matrix(i = c(1, 2), j = c(1, 1), x = c(2, 2),
dims = c(2, 1)))
expect_equal(sm2 + sm3,
sparse.matrix(i = c(rep(1:2, 2), 1), j = c(1, 1, 2, 2, 3),
x = c(5.4, 1.2, 2, 3, 3)))
expect_error(sm2 + sm0)
})
test_that("We can multiply and transpose", {
expect_equal(sm1 %*% sm3,
sparse.matrix(i = rep(1:2, 3), j = rep(1:3, each = 2),
x = c(3, 1, 6, 2, 9, 3), dims = c(3, 3)))
expect_error(sm1 %*% sm1)
expect_equal(t(sm1) %*% sm1,
sparse.matrix(i = 1, j = 1, x = 10, dims = c(2, 2)))
})
knitr::opts_chunk$set(error = TRUE)
X <- matrix(c(1, 100, 100, 1), 2, 2)
p <- c(0.5, 0.001)
#Generate required matrix X:
X <- matrix(c(1, 100, 100, 1), 2, 2)
p <- c(0.5, 0.001)
X
p
sgvals<- svd(t(X)%*%X)[["d"]]
max(sgvals)/min(sgvals)
h=t(X)%*%diag(p*(1-p))%*%X
sgvals_h<-svd(h)[["d"]]
max(sgvals_h)/min(sgvals_h)
cd_2-cd_1
sgvals<- svd(t(X)%*%X)[["d"]]
cd_1 <- max(sgvals)/min(sgvals)
cd_1
h=t(X)%*%diag(p*(1-p))%*%X
sgvals_h<-svd(h)[["d"]]
cd_2 <- max(sgvals_h)/min(sgvals_h)
cd_2-cd_1
# Args:
#     X: A numeric data matrix.
#     y: Response vector.
#     family: Instance of an R ‘family‘ object.
#     maxit: Integer maximum number of iterations.
#     tol: Numeric tolerance parameter.
#     lambda: a penalty term
#
# Returns:
#     Regression vector beta of length ncol(X).
irwls_glm<-function(X, y, family, maxit=25, tol=1e-10, lambda){
beta <- rep(0,ncol(X))
for(j in 1:maxit){
b_old <- beta
eta <- X %*% beta
mu <- family$linkinv(eta)
mu_p <- family$mu.eta(eta)
z <- eta + (y - mu) / mu_p
W <- as.numeric(mu_p^2 / family$variance(mu))
XtX <- crossprod(X, diag(W) %*% X)
Xtz <- crossprod(X, W * z)
# Add the penalty (credit to Wenfeng zhang)
V<-XtX+diag(lambda,dim(XtX)[1])
beta<-solve(V, Xtz)
if(sqrt(crossprod(beta - b_old)) < tol) break
}
beta
}
# Make data
n <- 1000; p <- 3
beta <- c(0.2, 2, 1)
X <- cbind(1, matrix(rnorm(n * (p- 1)), ncol = p - 1))
mu <- 1 - pcauchy(X %*% beta)
y <- as.numeric(runif(n) > mu)
# Test the function casl_glm_irwls_ridge
beta <- casl_glm_irwls_ridge(X, y,
family = binomial(link = "cauchit"),
lambda = 0.1)
# Make data
n <- 1000; p <- 3
beta <- c(0.2, 2, 1)
X <- cbind(1, matrix(rnorm(n * (p- 1)), ncol = p - 1))
mu <- 1 - pcauchy(X %*% beta)
y <- as.numeric(runif(n) > mu)
# Test the function casl_glm_irwls_ridge
beta <- irwls_glm(X, y,
family = binomial(link = "cauchit"),
lambda = 0.1)
beta
# using data to check the result of the function
n <- 1000; p <- 3
beta <- c(0.2, 2, 1)
X <- cbind(1, matrix(rnorm(n * (p- 1)), ncol = p - 1))
mu <- 1 - pcauchy(X %*% beta)
y <- as.numeric(runif(n) > mu)
# Test the function casl_glm_irwls_ridge
beta <- irwls_glm(X, y,
family = binomial(link = "cauchit"),
lambda = 0.1)
beta
sparse.matrix<-function(i,j,x,dims=c(max(i),max(j)))
{
if (length(i)!=length(j))
stop("The row coordinates and column coordinates do not have same length")
sm<-cbind(i,j,x)
#sort the order of rows firstly based on i, then based on j
sm<-sm[order(sm[,1],sm[,2]),]
sm<-matrix(as.numeric(sm), ncol=3,byrow=F)
colnames(sm)<-c("i","j","x")
sm<-data.frame(i=sm[,1],j=sm[,2],x=sm[,3])
rownames(sm)<-1:dim(sm)[1]
m<-list(sparse.matrix=sm,dims=dims)
class(m)<-"sparse.matrix"
return(m)
}
stop("Length of row coordinates and length ofcolumn coordinates do not match!")
